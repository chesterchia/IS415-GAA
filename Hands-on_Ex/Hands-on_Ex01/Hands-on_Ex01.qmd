---
title: "Hands-on Exercise 1: Geospatial Data Wrangling with R"
author: "Chester Chia"
execute:
  warning: false
---

### Installing and loading R packages

```{r}
pacman::p_load(tidyverse, sf)
```

### Importing a geospatial data in shapefile format

```{r}
mpsz <- st_read(dsn = "data/geospatial",
                layer = "MP14_SUBZONE_WEB_PL")
```

### Importing a polyline feature data in shapefile format

```{r}
cyclingpath = st_read(dsn = "data/geospatial", 
                      layer = "CyclingPathGazette")
```

### Importing GIS data in kml format

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

### Importing aspatial data

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

### Working with st_geometry()

```{r}
st_geometry(mpsz)
```

### Working with glimpse()

```{r}
glimpse(mpsz)
```

### Working with head()

```{r}
head(mpsz, n=5)
```

### Using list() instead of glimpse()

```{r}
list(listings)
```

### Creating a simple feature data frame from an aspatial data frame

```{r}
listings_sf <- st_as_sf(listings,
                        coords= c("longitude", "latitude"),
                        crs=4326) %>%
  st_transform(crs = 3414)
glimpse(listings_sf)
```

## Plotting

### Plotting the geospatial data

```{r}
plot(mpsz)
```

### Plotting only the geometry

```{r}
plot(st_geometry(mpsz))
```

### Plotting the sf object using a specific attribute

```{r}
plot(mpsz["PLN_AREA_N"])
```

## Projection

### Assigning EPSG code to a simple feature data frame

```{r}
st_crs(mpsz)
```

A common issue that can occur is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.

Although mpsz data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be 3414.

In order to assign the correct EPSG code to mpsz data frame, st_set_crs() of sf package is used as shown in the code chunk below.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
st_crs(mpsz3414)
```

### Projection transformation

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
st_geometry(preschool3414)
```

### Geoprocessing with sf package 

**The scenario:** The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

**The solution:** Use st_buffer() to compute the 5m buffers around cycling paths. Calculate the area of the buffers, and derive the total land involved using sum() of Base R.

```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
buffer_cycling$AREA <- st_area(buffer_cycling)
sum(buffer_cycling$AREA)
```

### Point-in-polygon count 

**The scenario:** A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

**The solution:** Identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
summary(mpsz3414$`PreSch Count`)
```

To list the planning subzone with the most number of pre-school, the top_n() of dplyr package is used

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

The solution: Use st_area() of sf package to derive the area of each planning subzone. Next, mutate() of dplyr package is used to compute the density.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## Exploratory Data Analysis (EDA) 

### Plotting histogram to reveal distribution of PreSch Density

```{r}
hist(mpsz3414$`PreSch Density`)
```

Further customized:

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

### Using a scatterplot to show the relationship between Pre-School density and Pre-School count

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```

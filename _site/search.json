[
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)\n\n\nhunan &lt;- st_read(dsn=\"data/geospatial\",\n                 layer=\"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\chesterchia\\IS415-GAA\\In-class_Ex\\In-class_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhunan &lt;- left_join(hunan, hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n\n\nWorking with GWSS\n\nhunan_sp &lt;- hunan %&gt;%\n  as_Spatial()\n\n\ngwstat &lt;- gwss(data = hunan_sp,\n               vars = \"GDPPC\",\n               bw = 6,\n               kernel = \"bisquare\",\n               adaptive = TRUE,\n               longlat = T)\n\n\n\nRecap from Hands-on Exercise 4\n\nbasemap &lt;- tm_shape(hunan) + #no output, just read into memory\n  tm_polygons() + #plot out polygons\n  tm_text(\"NAME_3\", size=0.5) #county name and font size\n\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2) #use tmap to arrange 2 maps into 1 row, 2 col\n\n\n\n\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE) #list of polygon and its neighbours based on internal id using queen's case\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\nwm_q[[1]] #gives neighbours of id=1\n\n[1]  2  3  4 57 85\n\n\nTo get name, must use hunan, not wm_q which is a list and does not contain the name:\n\nhunan$County[1] #retrieves county name of id=\n\n[1] \"Anxiang\"\n\n\n\nhunan$NAME_3[c(2,3,4,57,85)] #names of five neighbouring polygons\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\n\nwm_r &lt;- poly2nb(hunan, queen=FALSE) #uses rook case instead\nsummary(wm_r) #number of links will be reduced as compared to using queen's case\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nFor fixed distance, determine cut-off distance.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\ncoords &lt;- cbind(longitude, latitude)\nk1 &lt;- knn2nb(knearneigh(coords)) #calculate nearest neighbour\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE)) \nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nUse largest distance as cut off, round up (61.79 ~ 62)\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE) #anything &lt;62km considered neighbour\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\n\nhunan &lt;- left_join(hunan, lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Human mobility, the movement of human beings in space and time, reflects the spatial-temporal characteristics of human behavior. With the advancement Information and Communication Technologies (ICT) especially smart phone, a large volume of data related to human mobility have been collected. By using appropriate GIS analysis methods, these data are potentially useful in supporting smart city planning and management.\nIn Singapore, one of the important source of data related to human mobility is from Land Transport Authority (LTA) DataMall. Two data sets related to human mobility are provided by the portal, they are: Passenger Volume by Origin Destination Train Stations and Passenger Volume by Origin Destination Bus Stops. One of the limitation of these data sets is that their location are biased to either bus stops or MRT/LRT stations. In 2020, another very interesting human mobility data set called Grab Posisi was released by GRAB, one of the largest shared taxi operator in South-east Asia. There are two data sets been released and one of them is for Singapore\n\n\nThe tasks of this take-home exercise are as follows:\n\nUsing appropriate function of sf and tidyverse, preparing the following geospatial data layer in sf tibble data.frames:\n\nGrab taxi location points either by origins or destinations.\nRoad layer within Singapore excluding outer islands.\nSingapore boundary layer excluding outer islands\n\nUsing the extracted data, derive traditional Kernel Density Estimation layers.\nUsing the extracted data, derive either Network Kernel Density Estimation (NKDE) or Temporal Network Kernel Density Estimation (TNKDE)\nUsing appropriate tmap functions, display the kernel density layers on openstreetmap of Singapore.\nDescribe the spatial patterns revealed by the kernel density maps."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#overview",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#overview",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Human mobility, the movement of human beings in space and time, reflects the spatial-temporal characteristics of human behavior. With the advancement Information and Communication Technologies (ICT) especially smart phone, a large volume of data related to human mobility have been collected. By using appropriate GIS analysis methods, these data are potentially useful in supporting smart city planning and management.\nIn Singapore, one of the important source of data related to human mobility is from Land Transport Authority (LTA) DataMall. Two data sets related to human mobility are provided by the portal, they are: Passenger Volume by Origin Destination Train Stations and Passenger Volume by Origin Destination Bus Stops. One of the limitation of these data sets is that their location are biased to either bus stops or MRT/LRT stations. In 2020, another very interesting human mobility data set called Grab Posisi was released by GRAB, one of the largest shared taxi operator in South-east Asia. There are two data sets been released and one of them is for Singapore\n\n\nThe tasks of this take-home exercise are as follows:\n\nUsing appropriate function of sf and tidyverse, preparing the following geospatial data layer in sf tibble data.frames:\n\nGrab taxi location points either by origins or destinations.\nRoad layer within Singapore excluding outer islands.\nSingapore boundary layer excluding outer islands\n\nUsing the extracted data, derive traditional Kernel Density Estimation layers.\nUsing the extracted data, derive either Network Kernel Density Estimation (NKDE) or Temporal Network Kernel Density Estimation (TNKDE)\nUsing appropriate tmap functions, display the kernel density layers on openstreetmap of Singapore.\nDescribe the spatial patterns revealed by the kernel density maps."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setup",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setup",
    "title": "Take-Home Exercise 1",
    "section": "2.0 Setup",
    "text": "2.0 Setup\n\n2.1 Installing packages\n\npacman::p_load(arrow, tidyverse, sf, tmap, maptools, spatstat, stringr, nngeo, spNetwork, viridis, classInt, gifski)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-wrangling",
    "title": "Take-Home Exercise 1",
    "section": "3.0 Data Wrangling",
    "text": "3.0 Data Wrangling\n\n3.1 Importing data\n\nImporting the Grab Posisi Dataset\n\ngrabp &lt;- open_dataset(\"data/aspatial/GrabPosisi/\") %&gt;%\n  as.data.frame()\n\n\n\nImporting the OSM dataset\n\nosm = st_read(\"data/geospatial/malaysia-singapore-brunei-latest-free.shp\",\n              layer=\"gis_osm_roads_free_1\")\n\nReading layer `gis_osm_roads_free_1' from data source \n  `C:\\chesterchia\\IS415-GAA\\Take-home_Ex\\Take-home_Ex01\\data\\geospatial\\malaysia-singapore-brunei-latest-free.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1765176 features and 10 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 99.66041 ymin: 0.8021131 xmax: 119.2601 ymax: 7.514393\nGeodetic CRS:  WGS 84\n\n\n\n\nImporting the Master Plan Subzone Dataset\n\nmpsz &lt;- st_read(\"data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `C:\\chesterchia\\IS415-GAA\\Take-home_Ex\\Take-home_Ex01\\data\\geospatial\\MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nSince each description field is embedded in HTML, I’ll be using the third method from this article to parse the data.\n\nmpsz &lt;- mpsz %&gt;%\n  mutate(Match=str_match_all(Description,\"&lt;td&gt;(.*?)&lt;/td&gt;\")) %&gt;%\n  mutate(Match=map(Match, ~ .[,2])) %&gt;%\n  mutate(Match=map(Match,setNames,c(\"SUBZONE_NO\",\"SUBZONE_N\",\"SUBZONE_C\",\"CA_IND\", \"PLN_AREA_N\", \"PLN_AREA_C\", \"REGION_N\", \"REGION_C\", \"INC_CRC\", \"FMEL_UPD_D\"))) %&gt;%\n  unnest_wider(Match) %&gt;%\n  st_as_sf()\n\nI can then select only the data I need and drop the unnecessary fields.\n\nmpsz &lt;- mpsz %&gt;%\n  dplyr::select('Name', 'geometry', 'SUBZONE_NO', 'SUBZONE_N', 'SUBZONE_C', 'PLN_AREA_N', 'PLN_AREA_C', 'REGION_N', 'REGION_C')\n\nNow, let us check for invalid geometries:\n\nlength(which(st_is_valid(mpsz) == FALSE))\n\n[1] 6\n\n\n\nmpsz &lt;- st_make_valid(mpsz)\nmpsz &lt;- st_zm(mpsz)\n\n\n\n\n3.2 Wrangling\n\nGrabPosisi\nAlthough the GrabPosisi dataset consists of many fields, we are only interested in the origin and destinations. To do this, we can first convert the timestamp into datetime format, and then sort it ascending/descending and retrieving the first row. This will give us the earliest and latest points.\n\ngrabp$pingtimestamp &lt;- as_datetime(grabp$pingtimestamp, tz=\"Asia/Singapore\")\n\n\norigin_df &lt;- grabp %&gt;%\n  group_by(trj_id) %&gt;%\n  arrange(pingtimestamp) %&gt;%\n  filter(row_number()==1) %&gt;%\n  mutate(weekday = wday(pingtimestamp,\n                        label=TRUE,\n                        abbr=TRUE),\n         start_hr = factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp))) %&gt;%\n  st_as_sf(coords = c(\"rawlng\", \"rawlat\"),\n                      crs = 4326) %&gt;%\n  st_transform(crs = 3414)\n\ndestination_df &lt;- grabp %&gt;%\n  group_by(trj_id) %&gt;%\n  arrange(desc(pingtimestamp)) %&gt;%\n  filter(row_number()==1) %&gt;%\n  mutate(weekday = wday(pingtimestamp,\n                        label=TRUE,\n                        abbr=TRUE),\n         end_hr = factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp))) %&gt;%\n  st_as_sf(coords = c(\"rawlng\", \"rawlat\"),\n                      crs = 4326) %&gt;%\n  st_transform(crs = 3414)\n\nHere are what the origin and destination dataframes look like after converting it:\n\nhead(origin_df)\n\nSimple feature collection with 6 features and 10 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 17201.85 ymin: 29236.55 xmax: 31518.05 ymax: 47967.97\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 11\n# Groups:   trj_id [6]\n  trj_id driving_mode osname pingtimestamp        speed bearing accuracy weekday\n  &lt;chr&gt;  &lt;chr&gt;        &lt;chr&gt;  &lt;dttm&gt;               &lt;dbl&gt;   &lt;int&gt;    &lt;dbl&gt; &lt;ord&gt;  \n1 70895  car          andro… 2019-04-08 08:09:26  9.95      111      4   Mon    \n2 21926  car          andro… 2019-04-08 08:09:48 11.0        75      4   Mon    \n3 47498  car          ios    2019-04-08 08:09:50 18.6       307      8   Mon    \n4 18103  car          andro… 2019-04-08 08:09:55  0.404     159      3   Mon    \n5 41322  car          andro… 2019-04-08 08:09:57 17.9       232      3.9 Mon    \n6 64813  car          ios    2019-04-08 08:10:03 17.1       106     10   Mon    \n# ℹ 3 more variables: start_hr &lt;fct&gt;, day &lt;fct&gt;, geometry &lt;POINT [m]&gt;\n\n\n\nhead(destination_df)\n\nSimple feature collection with 6 features and 10 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14101.2 ymin: 33097.49 xmax: 44192.98 ymax: 46866.96\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 11\n# Groups:   trj_id [6]\n  trj_id driving_mode osname  pingtimestamp       speed bearing accuracy weekday\n  &lt;chr&gt;  &lt;chr&gt;        &lt;chr&gt;   &lt;dttm&gt;              &lt;dbl&gt;   &lt;int&gt;    &lt;dbl&gt; &lt;ord&gt;  \n1 81574  car          ios     2019-04-22 07:56:49 15.3      103     8    Mon    \n2 54687  car          android 2019-04-22 07:56:46  8.15     299     4.55 Mon    \n3 17190  car          android 2019-04-22 07:56:36 12.4      202     4    Mon    \n4 13793  car          android 2019-04-22 07:56:30  6.47     170     3.9  Mon    \n5 39014  car          ios     2019-04-22 07:56:27  3.59     169     4    Mon    \n6 41170  car          ios     2019-04-22 07:56:13 13.1       71     5    Mon    \n# ℹ 3 more variables: end_hr &lt;fct&gt;, day &lt;fct&gt;, geometry &lt;POINT [m]&gt;\n\n\nOnce again, it is good practice to drop columns that we don’t require.\n\norigin_df &lt;- origin_df %&gt;%\n  dplyr::select('trj_id', 'pingtimestamp', 'geometry', 'weekday', 'start_hr', 'day')\ndestination_df &lt;- destination_df %&gt;%\n  dplyr::select('trj_id', 'pingtimestamp', 'geometry', 'weekday', 'end_hr', 'day')\n\nWe will then save the dataframes into an rds file to save memory, which we can retrieve next time for future use.\n\nwrite_rds(origin_df, \"data/rds/origin_df.rds\")\nwrite_rds(destination_df, \"data/rds/destination_df.rds\")\n\n\norigin_df &lt;- read_rds(\"data/rds/origin_df.rds\")\ndestination_df &lt;- read_rds(\"data/rds/destination_df.rds\")\n\n\n\nOpen Street Maps\nSince we are interested in road layers, we can look at a summary of the fclass column in our data.\n\nunique(osm$fclass)\n\n [1] \"primary\"        \"secondary\"      \"residential\"    \"service\"       \n [5] \"track\"          \"tertiary\"       \"footway\"        \"primary_link\"  \n [9] \"motorway_link\"  \"tertiary_link\"  \"motorway\"       \"unclassified\"  \n[13] \"trunk\"          \"trunk_link\"     \"secondary_link\" \"pedestrian\"    \n[17] \"living_street\"  \"path\"           \"steps\"          \"cycleway\"      \n[21] \"track_grade2\"   \"track_grade4\"   \"track_grade1\"   \"track_grade3\"  \n[25] \"unknown\"        \"track_grade5\"   \"bridleway\"     \n\n\nWe can drop the classes that are not roads to reduce the size of our dataset. To know which are roads, we can refer to section 5.2 of geofrabik’s documentation. I have included roads used by vehicles, and have excluded the rest including classes that I was unable to find in the documentation.\n\nto_keep &lt;- c(\"primary\", \"secondary\", \"residential\", \"service\", \"track\", \"tertiary\", \"primary_link\", \"motorway_link\", \"motorway\", \"trunk\", \"trunk_link\", \"secondary_link\", \"living_street\")\nosm &lt;- osm %&gt;%\n  filter(fclass %in% to_keep)\n\nTo confirm that we have reduced our dataset:\n\nunique(osm$fclass)\n\n [1] \"primary\"        \"secondary\"      \"residential\"    \"service\"       \n [5] \"track\"          \"tertiary\"       \"primary_link\"   \"motorway_link\" \n [9] \"motorway\"       \"trunk\"          \"trunk_link\"     \"secondary_link\"\n[13] \"living_street\" \n\n\nAnd finally, we can drop columns that we don’t need.\n\nosm &lt;- osm %&gt;%\n  dplyr::select(\"osm_id\", \"fclass\")\n\n\n\n3.3 Verifying + Transforming Coordinate System\nLet us check the coordinate system of mpsz and osm:\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\n\nst_crs(osm)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nSince they are not SVY21, we will change them.\n\nmpsz &lt;- st_transform(mpsz, crs=3414)\nosm &lt;- st_transform(osm, crs=3414)\n\n\n\n3.4 Removing Outer Islands\n\nplot(st_geometry(mpsz))\n\n\n\n\nAs we can see from this plot, there are islands surrounding Singapore that are not connected to the mainland by road, such as Pulau Tekong and Pulau Ubin - these are our “outer islands” that we will exclude.\nThe most straightforward way to do this would be to use st_union to create a single multipolygon encompassing all areas, then select a specific part that represents the mainland, which in our case would be the largest polygon (10th one). We can then fill in the holes using st_remove_holes from the nngeo package.\n\nmerged_sg &lt;- st_union(mpsz) %&gt;%\n    st_cast(\"POLYGON\")\n\nmerged_sg &lt;- merged_sg[c(10)]\nmerged_sg &lt;- st_remove_holes(merged_sg)\nmerged_sg &lt;- st_as_sf(merged_sg)\n\nplot(st_geometry(merged_sg))\n\n\n\n\n\n\n3.5 Preparing for KDE\nWe can now create an owin object for KDE later on, and save it into an RDS for future use.\n\nmerged &lt;- as_Spatial(merged_sg)\nmerged_sp &lt;- as(merged, \"SpatialPolygons\")\nmerged_owin &lt;- as(merged_sp, \"owin\")\nwrite_rds(merged_owin, \"data/rds/merged_owin.rds\")\n\nWe can now remove the data on Malaysian and Bruneian roads, and subsequently also save this into an RDS.\n\nosm_sg &lt;- st_intersection(osm, merged_sg)\n\nAn issue that I ran into is that some geometry was saved as MULTILINESTRING, which caused an error when calculating NKDE.\n\nsummary(osm_sg)\n\n    osm_id             fclass                     geometry     \n Length:158955      Length:158955      LINESTRING     :158888  \n Class :character   Class :character   MULTILINESTRING:    67  \n Mode  :character   Mode  :character   epsg:3414      :     0  \n                                       +proj=tmer...  :     0  \n\n\nAs such, I’ll split each of those geometry into LINESTRINGs.\n\nosm_sg &lt;- st_cast(st_cast(osm_sg, \"MULTILINESTRING\"), \"LINESTRING\")\nsummary(osm_sg)\n\n    osm_id             fclass                   geometry     \n Length:159027      Length:159027      LINESTRING   :159027  \n Class :character   Class :character   epsg:3414    :     0  \n Mode  :character   Mode  :character   +proj=tmer...:     0  \n\n\n\nwrite_rds(osm_sg, \"data/rds/osm_sg.rds\")\nosm_sg &lt;- read_rds(\"data/rds/osm_sg.rds\")\n\nFinally, we can convert our data to ppp objects, before checking for duplicates.\n\norigin &lt;- as_Spatial(origin_df)\ndestination &lt;- as_Spatial(destination_df)\n\norigin_sp &lt;- as(origin, \"SpatialPoints\")\ndestination_sp &lt;- as(destination, \"SpatialPoints\")\n\norigin_ppp &lt;- as(origin_sp, \"ppp\")\ndestination_ppp &lt;- as(destination_sp, \"ppp\")\n\norigin_ppp &lt;- origin_ppp[merged_owin]\ndestination_ppp &lt;- destination_ppp[merged_owin]\n\n\nany(duplicated(origin_ppp))\n\n[1] FALSE\n\n\n\nany(duplicated(destination_ppp))\n\n[1] FALSE"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "Welcome to IS415 Geospatial Analytics and Applications\nThis is the course website of IS415 I study this term. You will find my course work on this website."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kde",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kde",
    "title": "Take-Home Exercise 1",
    "section": "4.0 KDE",
    "text": "4.0 KDE\nWe can now finally perform KDE for our origin and destinations. I’ll use an automatically decided bandwidth with the four different methods, Gaussian, Epanechnikov, Quartic, and Disc, and plot them side by side.\n\nOriginDestination\n\n\n\norigin_ppp.km &lt;- rescale(origin_ppp, 1000, \"km\")\npar(mfrow=c(2,2), mar=c(3,3,1,3))\nplot(density(origin_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(origin_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(origin_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(origin_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n\n\n\n\n\n\n\ndestination_ppp.km &lt;- rescale(destination_ppp, 1000, \"km\")\npar(mfrow=c(2,2), mar=c(3,3,1,3))\nplot(density(destination_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(destination_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(destination_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(destination_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n\n\n\n\n\n\n\nAs seen from the above plots, majority of the map was relatively dark, except for Changi Airport which is where many Grab trips depart from and arrive to.\nIf we recall from our Hands-on Exercise, Baddeley et. (2016) suggested the use of the bw.ppl() algorithm because in ther experience it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters. But they also insist that if the purpose of once study is to detect a single tight cluster in the midst of random noise then the bw.diggle() method seems to work best.\nLet us compare the output using both.\n\nOriginDestination\n\n\n\norigin_ppp.km &lt;- rescale(origin_ppp, 1000, \"km\")\norigin.bw &lt;- density(origin_ppp.km,\n                     sigma=bw.diggle,\n                     edge=TRUE,\n                     kernel=\"gaussian\")\norigin.ppl &lt;- density(origin_ppp.km,\n                      sigma=bw.ppl,\n                      edge=TRUE,\n                      kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(origin.bw, main=\"bw.diggle\")\nplot(origin.ppl, main=\"bw.ppl\")\n\n\n\n\n\n\n\ndestination_ppp.km &lt;- rescale(destination_ppp, 1000, \"km\")\ndestination.bw &lt;- density(destination_ppp.km,\n                     sigma=bw.diggle,\n                     edge=TRUE,\n                     kernel=\"gaussian\")\ndestination.ppl &lt;- density(destination_ppp.km,\n                      sigma=bw.ppl,\n                      edge=TRUE,\n                      kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(destination.bw, main=\"bw.diggle\")\nplot(destination.ppl, main=\"bw.ppl\")\n\n\n\n\n\n\n\nAs seen from the above plots, there is not much difference in the two bandwidths - both are relatively dark. This suggests the bandwidth used might be slightly too small, resulting in a high level of sensitivity to local fluctuations and noise in the data. In order to make the map more interpretable, I will use a higher bandwidth which should light up the map and make the overall pattern of the data more apparent.\n\nOriginDestination\n\n\n\norigin_ppp.km &lt;- rescale(origin_ppp, 1000, \"km\")\norigin.bw &lt;- density(origin_ppp.km,\n                     sigma=0.6,\n                     edge=TRUE,\n                     kernel=\"gaussian\")\nplot(origin.bw)\n\n\n\n\n\n\n\ndestination_ppp.km &lt;- rescale(destination_ppp, 1000, \"km\")\ndestination.bw &lt;- density(destination_ppp.km,\n                     sigma=0.6,\n                     edge=TRUE,\n                     kernel=\"gaussian\")\nplot(destination.bw)\n\n\n\n\n\n\n\nHere are my observations from the KDE:\n\nNotably illuminated areas on the maps were identified at Changi Airport, primarily due to the substantial traffic volume, irrespective of whether it was the point of origin or destination.\nA bright area was also observed in the Central Business District (CBD).\nThe illuminated regions in the northern part of the map could be linked to Woodlands Checkpoint, along with the geographical distance from the Yishun/Sembawang/Canberra areas to the CBD. Consequently, more people were observed to be using Grab services for commuting to and from work.\nThe bright spots in the western part of the map were potentially associated with office complexes in the Jurong East area. Additionally, the Choa Chu Kang area, being relatively distant from the CBD, contributed to increased Grab activity."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#nkde",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#nkde",
    "title": "Take-Home Exercise 1",
    "section": "5.0 NKDE",
    "text": "5.0 NKDE\n\n5.1 Study Area\nBased on our observations from the KDE, we will be using the following zones for NKDE:\n\nChangi Airport - CHANGI\nCBD - DOWNTOWN CORE\nWoodlands (incl. checkpoint) - WOODLANDS\nJurong East - JURONG EAST\n\n\n\n5.2 Changi Airport\nBefore we begin, let’s restrict our NKDE to just the Changi area, while using st_intersection to ensure that the area is limited to the mainland, as well as identifying the features in the OSM data that fall within the bounds of the Changi area.\n\nchangi &lt;- mpsz %&gt;%\n  filter(PLN_AREA_N==\"CHANGI\")\nchangi &lt;- st_intersection(changi, merged_sg)\nosm_changi &lt;- st_intersection(osm_sg, changi)\nosm_changi_index &lt;- as.numeric(osm_changi$osm_id)\nosm_changi &lt;- osm_sg[osm_sg$osm_id %in% osm_changi_index, ]\n\nplot(osm_changi)\n\n\n\n\nWe can then intersect Changi and the destination/origin data frames:\n\nOriginDestination\n\n\n\norigin_df.changi &lt;- st_intersection(origin_df, changi)\ndestination_df.changi &lt;- st_intersection(destination_df, changi)\nplot(origin_df.changi)\n\n\n\n\n\n\n\nplot(destination_df.changi)\n\n\n\n\n\n\n\nWe can also visualize the data using tmap.\n\nOriginDestination\n\n\n\ntm_shape(osm_changi) +\n  tm_lines() +\ntm_shape(origin_df.changi) +\n  tm_dots(col=\"orange\")\n\n\n\n\n\n\n\ntm_shape(osm_changi) +\n  tm_lines() +\ntm_shape(destination_df.changi) +\n  tm_dots(col=\"orange\")\n\n\n\n\n\n\n\n\nNKDE Calculation\n\nlixels &lt;- lixelize_lines(osm_changi, 700, mindist=350)\nsamples &lt;- lines_center(lixels)\n\n\ndensities.origin &lt;- nkde(osm_changi,\n                         events=origin_df.changi,\n                         w=rep(1, nrow(origin_df.changi)),\n                         samples=samples,\n                         kernel_name=\"quartic\",\n                         bw=300,\n                         div=\"bw\",\n                         method=\"simple\",\n                         digits=1,\n                         tol=1,\n                         grid_shape=c(1,1),\n                         max_depth=8,\n                         agg=5,\n                         sparse=TRUE,\n                         verbose=FALSE\n                         )\ndensities.destination &lt;- nkde(osm_changi,\n                         events=destination_df.changi,\n                         w=rep(1, nrow(destination_df.changi)),\n                         samples=samples,\n                         kernel_name=\"quartic\",\n                         bw=300,\n                         div=\"bw\",\n                         method=\"simple\",\n                         digits=1,\n                         tol=1,\n                         grid_shape=c(1,1),\n                         max_depth=8,\n                         agg=5,\n                         sparse=TRUE,\n                         verbose=FALSE\n                         )\n\n\nsamples$density.origin &lt;- densities.origin*1000\nsamples$density.destination &lt;- densities.destination*1000\nlixels$density.origin &lt;- densities.origin*1000\nlixels$density.destination &lt;- densities.destination*1000\n\n\nOriginDestination\n\n\n\ntm_shape(lixels) +\n  tm_lines(col=\"density.origin\")\n\n\n\n\n\n\n\ntm_shape(lixels) +\n  tm_lines(col=\"density.destination\")\n\n\n\n\n\n\n\nAs we can see from the visualization, a large concentration of the density was at the dropoff/pickup points of Changi Airport, as everywhere else was so light that it was unable to be seen. The only glaring difference between both origin and destination was that for destination, we can see the density actually stretch to the bend before the drop off point. As such, I went into Google Street View and found this:\n\nAs you can see from the street view, this stretch of the map is actually still the highway leading to the airport, and it makes no sense for passengers to actually be alighting here. My hypothesis is that the grab drivers are intentionally “ending” the trip in the app slightly early, so that they are able to quickly search for more pickups.\n\n\n\n5.3 CBD\nWe will be doing the same data preparation for the CBD area.\n\ncbd &lt;- mpsz %&gt;%\n  filter(PLN_AREA_N==\"DOWNTOWN CORE\")\nchangi &lt;- st_intersection(cbd, merged_sg)\nosm_cbd &lt;- st_intersection(osm_sg, cbd)\nosm_cbd_index &lt;- as.numeric(osm_cbd$osm_id)\nosm_cbd &lt;- osm_sg[osm_sg$osm_id %in% osm_cbd_index, ]\n\nplot(osm_cbd)\n\n\n\n\n\ndestination_df.cbd = st_intersection(destination_df, cbd)\norigin_df.cbd = st_intersection(origin_df, cbd)\n\n\nOriginDestination\n\n\n\ntm_shape(osm_cbd) + \n  tm_lines() +\ntm_shape(origin_df.cbd) +\n  tm_dots(col = \"orange\")\n\n\n\n\n\n\n\ntm_shape(osm_cbd) + \n  tm_lines() +\ntm_shape(destination_df.cbd) +\n  tm_dots(col = \"orange\")\n\n\n\n\n\n\n\n\nNKDE Calculation\n\nlixels &lt;- lixelize_lines(osm_cbd, 700, mindist=350)\nsamples &lt;- lines_center(lixels)\n\n\ndensities.origin &lt;- nkde(osm_cbd,\n                         events=origin_df.cbd,\n                         w=rep(1, nrow(origin_df.cbd)),\n                         samples=samples,\n                         kernel_name=\"quartic\",\n                         bw=300,\n                         div=\"bw\",\n                         method=\"simple\",\n                         digits=1,\n                         tol=1,\n                         grid_shape=c(1,1),\n                         max_depth=8,\n                         agg=5,\n                         sparse=TRUE,\n                         verbose=FALSE\n                         )\ndensities.destination &lt;- nkde(osm_cbd,\n                         events=destination_df.cbd,\n                         w=rep(1, nrow(destination_df.cbd)),\n                         samples=samples,\n                         kernel_name=\"quartic\",\n                         bw=300,\n                         div=\"bw\",\n                         method=\"simple\",\n                         digits=1,\n                         tol=1,\n                         grid_shape=c(1,1),\n                         max_depth=8,\n                         agg=5,\n                         sparse=TRUE,\n                         verbose=FALSE\n                         )\n\n\nsamples$density.origin &lt;- densities.origin*1000\nsamples$density.destination &lt;- densities.destination*1000\nlixels$density.origin &lt;- densities.origin*1000\nlixels$density.destination &lt;- densities.destination*1000\n\n\nOriginDestination\n\n\n\ntm_shape(lixels) +\n  tm_lines(col=\"density.origin\")\n\n\n\n\n\n\n\ntm_shape(lixels) +\n  tm_lines(col=\"density.destination\")\n\n\n\n\n\n\n\n\n\nUsing the above image as reference, we can see that the intersections around Raffles Place have very high density for the origins - likely due to the fact that many office complexes are located in or around the building itself. The northern part of the district where Nicoll Highway intersects Rochor Flyover is also very dense, for both destination and origin. This is due to where the CBD area is situated, with many office buildings such as Guoco Tower all being in this area.\n\n\n\n5.4 Woodlands\nWe will be doing the same data preparation for the woodlands area.\n\nwoodlands &lt;- mpsz %&gt;%\n  filter(PLN_AREA_N==\"WOODLANDS\") \nwoodlands &lt;- st_intersection(woodlands, merged_sg)\nosm_woodlands &lt;- st_intersection(osm_sg, woodlands) \nosm_woodlands_index &lt;- as.numeric(osm_woodlands$osm_id) \nosm_woodlands &lt;- osm_sg[osm_sg$osm_id %in% osm_woodlands_index, ]  \nplot(osm_woodlands)\n\n\n\n\n\ndestination_df.woodlands = st_intersection(destination_df, woodlands) \norigin_df.woodlands = st_intersection(origin_df, woodlands)\n\n\nOriginDestination\n\n\n\ntm_shape(osm_woodlands) +\n  tm_lines() + \ntm_shape(origin_df.woodlands) +\n  tm_dots(col = \"orange\")\n\n\n\n\n\n\n\ntm_shape(osm_woodlands) +\n  tm_lines() +\ntm_shape(destination_df.woodlands) +\n  tm_dots(col = \"orange\")\n\n\n\n\n\n\n\n\nNKDE Calculation\n\nlixels &lt;- lixelize_lines(osm_woodlands, 700, mindist=350) \nsamples &lt;- lines_center(lixels)\n\n\ndensities.origin &lt;- nkde(osm_woodlands,\n                         events=origin_df.woodlands,\n                         w=rep(1, nrow(origin_df.woodlands)),\n                         samples=samples,\n                         kernel_name=\"quartic\",\n                         bw=300,\n                         div=\"bw\",\n                         method=\"simple\",\n                         digits=1,\n                         tol=1,\n                         grid_shape=c(1,1),\n                         max_depth=8,\n                         agg=5,\n                         sparse=TRUE,\n                         verbose=FALSE\n) \ndensities.destination &lt;- nkde(osm_woodlands,\n                              events=destination_df.woodlands,\n                              w=rep(1, nrow(destination_df.woodlands)),\n                              samples=samples,\n                              kernel_name=\"quartic\",\n                              bw=300,\n                              div=\"bw\",\n                              method=\"simple\",\n                              digits=1,\n                              tol=1,\n                              grid_shape=c(1,1),\n                              max_depth=8,\n                              agg=5,\n                              sparse=TRUE,                          \n                              verbose=FALSE     \n)\n\n\nsamples$density.origin &lt;- densities.origin*1000 \nsamples$density.destination &lt;- densities.destination*1000 \nlixels$density.origin &lt;- densities.origin*1000 \nlixels$density.destination &lt;- densities.destination*1000\n\n\nOriginDestination\n\n\n\ntm_shape(lixels) + \n  tm_lines(col=\"density.origin\")\n\n\n\n\n\n\n\ntm_shape(lixels) +  \n  tm_lines(col=\"density.destination\")\n\n\n\n\n\n\n\nWe can address two very obvious hotspots. First, the hotspot in the west area.\n\n\n\nIn both the origin and destinations, the area around Marsiling MRT is the most dense - suggesting that there might be a lack of efficient transportation around the area from the station, hence people resulting to using Grab. In the origin, there is another hotspot right below the Woodlands checkpoint, suggesting most people Grab from the checkpoint rather than to, perhaps due to fatigue from working/leisuring in Johor Bahru.\n\n\n\nLastly, there is a hotspot in Central Woodlands. This can obviously be attributed to the MRT station, but we can also deduce that the majority of residents are staying in the central area.\n\n\n\n5.5 Jurong East\nWe will be doing the same data preparation for the jurong east area.\n\nje &lt;- mpsz %&gt;%   \n  filter(PLN_AREA_N==\"JURONG EAST\")  \nje &lt;- st_intersection(je, merged_sg) \nosm_je &lt;- st_intersection(osm_sg, je)  \nosm_je_index &lt;- as.numeric(osm_je$osm_id)  \nosm_je &lt;- osm_sg[osm_sg$osm_id %in% osm_je_index, ]\nplot(osm_je)\n\n\n\n\n\ndestination_df.je = st_intersection(destination_df, je)\norigin_df.je = st_intersection(origin_df, je)\n\n\nOriginDestination\n\n\n\ntm_shape(osm_je) +   \n  tm_lines() +\ntm_shape(origin_df.je) +\n  tm_dots(col = \"orange\")\n\n\n\n\n\n\n\ntm_shape(osm_je) +\n  tm_lines() +\ntm_shape(destination_df.je) +\n  tm_dots(col = \"orange\")\n\n\n\n\n\n\n\n\nNKDE Calculation\n\nlixels &lt;- lixelize_lines(osm_je, 700, mindist=350)\nsamples &lt;- lines_center(lixels)\n\n\ndensities.origin &lt;- nkde(osm_je,\n                         events=origin_df.je,\n                         w=rep(1, nrow(origin_df.je)),\n                         samples=samples,\n                         kernel_name=\"quartic\",\n                         bw=300, \n                         div=\"bw\",   \n                         method=\"simple\",  \n                         digits=1,          \n                         tol=1,           \n                         grid_shape=c(1,1),  \n                         max_depth=8,     \n                         agg=5,            \n                         sparse=TRUE,   \n                         verbose=FALSE \n)\ndensities.destination &lt;- nkde(osm_je,\n                              events=destination_df.je,\n                              w=rep(1, nrow(destination_df.je)),\n                              samples=samples,              \n                              kernel_name=\"quartic\",       \n                              bw=300,                     \n                              div=\"bw\",              \n                              method=\"simple\",    \n                              digits=1,        \n                              tol=1,          \n                              grid_shape=c(1,1),       \n                              max_depth=8,           \n                              agg=5,               \n                              sparse=TRUE,   \n                              verbose=FALSE  \n)\n\n\nsamples$density.origin &lt;- densities.origin*1000\nsamples$density.destination &lt;- densities.destination*1000 \nlixels$density.origin &lt;- densities.origin*1000 \nlixels$density.destination &lt;- densities.destination*1000\n\n\nOriginDestination\n\n\n\ntm_shape(lixels) +\n  tm_lines(col=\"density.origin\")\n\n\n\n\n\n\n\ntm_shape(lixels) +  \n  tm_lines(col=\"density.destination\")\n\n\n\n\n\n\n\n\nWith reference to the above image, there are two main areas of interest. The first is on the extreme north-east of the region, where IMM is situated. Being the largest outlet mall in Singapore, it is no surprise that there is a hotspot around this area, with shoppers grabbing to and fro.\nThe other is along Jurong Town Hall Road. My initial suspicions of office complexes was wrong - the two junctions that intersect it on the map that are hotspots both have little to no office buildings, and are mostly residential - specifically, there were a lot of condominium complexes. A possibility for the high amounts of trips originating and ending along this stretch could be due to a lack of efficient public transport around the area, or simply a high concentration of Jurong East residents staying in the area."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#cbd",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#cbd",
    "title": "Take-Home Exercise 1",
    "section": "5.3 CBD",
    "text": "5.3 CBD\nWe will be doing the same data preparation for the CBD area.\n\ncbd &lt;- mpsz %&gt;%\n  filter(PLN_AREA_N==\"DOWNTOWN CORE\")\nchangi &lt;- st_intersection(cbd, merged_sg)\nosm_cbd &lt;- st_intersection(osm_sg, cbd)\nosm_cbd_index &lt;- as.numeric(osm_cbd$osm_id)\nosm_cbd &lt;- osm_sg[osm_sg$osm_id %in% osm_cbd_index, ]\n\nplot(osm_cbd)\n\n\n\n\n\ndestination_df.cbd = st_intersection(destination_df, cbd)\norigin_df.cbd = st_intersection(origin_df, cbd)\n\n\nOriginDestination\n\n\n\ntm_shape(osm_cbd) + \n  tm_lines() +\ntm_shape(origin_df.cbd) +\n  tm_dots(col = \"orange\")\n\n\n\n\n\n\n\ntm_shape(osm_cbd) + \n  tm_lines() +\ntm_shape(destination_df.cbd) +\n  tm_dots(col = \"orange\")\n\n\n\n\n\n\n\n\nNKDE Calculation\n\nlixels &lt;- lixelize_lines(osm_cbd, 700, mindist=350)\nsamples &lt;- lines_center(lixels)\n\n\ndensities.origin &lt;- nkde(osm_cbd,\n                         events=origin_df.cbd,\n                         w=rep(1, nrow(origin_df.cbd)),\n                         samples=samples,\n                         kernel_name=\"quartic\",\n                         bw=300,\n                         div=\"bw\",\n                         method=\"simple\",\n                         digits=1,\n                         tol=1,\n                         grid_shape=c(1,1),\n                         max_depth=8,\n                         agg=5,\n                         sparse=TRUE,\n                         verbose=FALSE\n                         )\ndensities.destination &lt;- nkde(osm_cbd,\n                         events=destination_df.cbd,\n                         w=rep(1, nrow(destination_df.cbd)),\n                         samples=samples,\n                         kernel_name=\"quartic\",\n                         bw=300,\n                         div=\"bw\",\n                         method=\"simple\",\n                         digits=1,\n                         tol=1,\n                         grid_shape=c(1,1),\n                         max_depth=8,\n                         agg=5,\n                         sparse=TRUE,\n                         verbose=FALSE\n                         )\n\n\nsamples$density.origin &lt;- densities.origin*1000\nsamples$density.destination &lt;- densities.destination*1000\nlixels$density.origin &lt;- densities.origin*1000\nlixels$density.destination &lt;- densities.destination*1000\n\n\nOriginDestination\n\n\n\ntm_shape(lixels) +\n  tm_lines(col=\"density.origin\")\n\n\n\n\n\n\n\ntm_shape(lixels) +\n  tm_lines(col=\"density.destination\")\n\n\n\n\n\n\n\n\n\nUsing the above image as reference, we can see that the intersections around Raffles Place have very high density for the origins - likely due to the fact that many office complexes are located in or around the building itself. The northern part of the district where Nicoll Highway intersects Rochor Flyover is also very dense, for both destination and origin. This is due to where the CBD area is situated, with many office buildings such as Guoco Tower all being in this area."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#woodlands",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#woodlands",
    "title": "Take-Home Exercise 1",
    "section": "5.4 Woodlands",
    "text": "5.4 Woodlands\nWe will be doing the same data preparation for the woodlands area.\n\nwoodlands &lt;- mpsz %&gt;%\n  filter(PLN_AREA_N==\"WOODLANDS\") \nwoodlands &lt;- st_intersection(woodlands, merged_sg)\nosm_woodlands &lt;- st_intersection(osm_sg, woodlands) \nosm_woodlands_index &lt;- as.numeric(osm_woodlands$osm_id) \nosm_woodlands &lt;- osm_sg[osm_sg$osm_id %in% osm_woodlands_index, ]  \nplot(osm_woodlands)\n\n\n\n\n\ndestination_df.woodlands = st_intersection(destination_df, woodlands) \norigin_df.woodlands = st_intersection(origin_df, woodlands)\n\n\nOriginDestination\n\n\n\ntm_shape(osm_woodlands) +\n  tm_lines() + \ntm_shape(origin_df.woodlands) +\n  tm_dots(col = \"orange\")\n\n\n\n\n\n\n\ntm_shape(osm_woodlands) +\n  tm_lines() +\ntm_shape(destination_df.woodlands) +\n  tm_dots(col = \"orange\")\n\n\n\n\n\n\n\n\nNKDE Calculation\n\nlixels &lt;- lixelize_lines(osm_woodlands, 700, mindist=350) \nsamples &lt;- lines_center(lixels)\n\n\ndensities.origin &lt;- nkde(osm_woodlands,\n                         events=origin_df.woodlands,\n                         w=rep(1, nrow(origin_df.woodlands)),\n                         samples=samples,\n                         kernel_name=\"quartic\",\n                         bw=300,\n                         div=\"bw\",\n                         method=\"simple\",\n                         digits=1,\n                         tol=1,\n                         grid_shape=c(1,1),\n                         max_depth=8,\n                         agg=5,\n                         sparse=TRUE,\n                         verbose=FALSE\n) \ndensities.destination &lt;- nkde(osm_woodlands,\n                              events=destination_df.woodlands,\n                              w=rep(1, nrow(destination_df.woodlands)),\n                              samples=samples,\n                              kernel_name=\"quartic\",\n                              bw=300,\n                              div=\"bw\",\n                              method=\"simple\",\n                              digits=1,\n                              tol=1,\n                              grid_shape=c(1,1),\n                              max_depth=8,\n                              agg=5,\n                              sparse=TRUE,                          \n                              verbose=FALSE     \n)\n\n\nsamples$density.origin &lt;- densities.origin*1000 \nsamples$density.destination &lt;- densities.destination*1000 \nlixels$density.origin &lt;- densities.origin*1000 \nlixels$density.destination &lt;- densities.destination*1000\n\n\nOriginDestination\n\n\n\ntm_shape(lixels) + \n  tm_lines(col=\"density.origin\")\n\n\n\n\n\n\n\ntm_shape(lixels) +  \n  tm_lines(col=\"density.destination\")\n\n\n\n\n\n\n\nWe can address two very obvious hotspots. First, the hotspot in the west area.\n\n\n\nIn both the origin and destinations, the area around Marsiling MRT is the most dense - suggesting that there might be a lack of efficient transportation around the area from the station, hence people resulting to using Grab. In the origin, there is another hotspot right below the Woodlands checkpoint, suggesting most people Grab from the checkpoint rather than to, perhaps due to fatigue from working/leisuring in Johor Bahru.\n\n\n\nLastly, there is a hotspot in Central Woodlands. This can obviously be attributed to the MRT station, but we can also deduce that the majority of residents are staying in the central area."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#jurong-east",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#jurong-east",
    "title": "Take-Home Exercise 1",
    "section": "5.5 Jurong East",
    "text": "5.5 Jurong East\nWe will be doing the same data preparation for the jurong east area.\n\nje &lt;- mpsz %&gt;%   \n  filter(PLN_AREA_N==\"JURONG EAST\")  \nje &lt;- st_intersection(je, merged_sg) \nosm_je &lt;- st_intersection(osm_sg, je)  \nosm_je_index &lt;- as.numeric(osm_je$osm_id)  \nosm_je &lt;- osm_sg[osm_sg$osm_id %in% osm_je_index, ]\nplot(osm_je)\n\n\n\n\n\ndestination_df.je = st_intersection(destination_df, je)\norigin_df.je = st_intersection(origin_df, je)\n\n\nOriginDestination\n\n\n\ntm_shape(osm_je) +   \n  tm_lines() +\ntm_shape(origin_df.je) +\n  tm_dots(col = \"orange\")\n\n\n\n\n\n\n\ntm_shape(osm_je) +\n  tm_lines() +\ntm_shape(destination_df.je) +\n  tm_dots(col = \"orange\")\n\n\n\n\n\n\n\n\nNKDE Calculation\n\nlixels &lt;- lixelize_lines(osm_je, 700, mindist=350)\nsamples &lt;- lines_center(lixels)\n\n\ndensities.origin &lt;- nkde(osm_je,\n                         events=origin_df.je,\n                         w=rep(1, nrow(origin_df.je)),\n                         samples=samples,\n                         kernel_name=\"quartic\",\n                         bw=300, \n                         div=\"bw\",   \n                         method=\"simple\",  \n                         digits=1,          \n                         tol=1,           \n                         grid_shape=c(1,1),  \n                         max_depth=8,     \n                         agg=5,            \n                         sparse=TRUE,   \n                         verbose=FALSE \n)\ndensities.destination &lt;- nkde(osm_je,\n                              events=destination_df.je,\n                              w=rep(1, nrow(destination_df.je)),\n                              samples=samples,              \n                              kernel_name=\"quartic\",       \n                              bw=300,                     \n                              div=\"bw\",              \n                              method=\"simple\",    \n                              digits=1,        \n                              tol=1,          \n                              grid_shape=c(1,1),       \n                              max_depth=8,           \n                              agg=5,               \n                              sparse=TRUE,   \n                              verbose=FALSE  \n)\n\n\nsamples$density.origin &lt;- densities.origin*1000\nsamples$density.destination &lt;- densities.destination*1000 \nlixels$density.origin &lt;- densities.origin*1000 \nlixels$density.destination &lt;- densities.destination*1000\n\n\nOriginDestination\n\n\n\ntm_shape(lixels) +\n  tm_lines(col=\"density.origin\")\n\n\n\n\n\n\n\ntm_shape(lixels) +  \n  tm_lines(col=\"density.destination\")\n\n\n\n\n\n\n\n\nWith reference to the above image, there are two main areas of interest. The first is on the extreme north-east of the region, where IMM is situated. Being the largest outlet mall in Singapore, it is no surprise that there is a hotspot around this area, with shoppers grabbing to and fro.\nThe other is along Jurong Town Hall Road. My initial suspicions of office complexes was wrong - the two junctions that intersect it on the map that are hotspots both have little to no office buildings, and are mostly residential - specifically, there were a lot of condominium complexes. A possibility for the high amounts of trips originating and ending along this stretch could be due to a lack of efficient public transport around the area, or simply a high concentration of Jurong East residents staying in the area."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#tnkde",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#tnkde",
    "title": "Take-Home Exercise 1",
    "section": "6.0 TNKDE",
    "text": "6.0 TNKDE\nI will also be using TNKDE in order to observe how the density of events changes over time - in the context of this exercise, it will be to analyze the density of pickups/dropoffs at different times of the day on a road network. I referred to this documentation to assist me along the way.\n\n6.1 Changi Airport\n\ndestination_df.changi$end_hr &lt;- as.numeric(destination_df.changi$end_hr)\norigin_df.changi$start_hr &lt;- as.numeric(origin_df.changi$start_hr)\n\n\nlixels &lt;- lixelize_lines(osm_changi, 700, mindist = 350)\nsample_points &lt;- lines_center(lixels)\n\nsample_time.destination &lt;- seq(min(destination_df.changi$end_hr), max(destination_df.changi$end_hr), 1)\nsample_time.origin &lt;- seq(min(origin_df.changi$start_hr), max(origin_df.changi$start_hr), 1)\n\ntnkde_densities.destination &lt;- tnkde(lines = osm_changi,\n                   events = destination_df.changi,\n                   time_field = \"end_hr\",\n                   w = rep(1, nrow(destination_df.changi)), \n                   samples_loc = sample_points,\n                   samples_time = sample_time.destination, \n                   kernel_name = \"quartic\",\n                   bw_net = 300, bw_time = 1,\n                   adaptive = TRUE,\n                   trim_bw_net = 900,\n                   trim_bw_time = 80,\n                   method = \"discontinuous\",\n                   div = \"bw\", max_depth = 10,\n                   digits = 2, tol = 0.01,\n                   agg = 15, grid_shape = c(1,1), \n                   verbose  = FALSE)\n\ntnkde_densities.origin &lt;- tnkde(lines = osm_changi,\n                   events = origin_df.changi,\n                   time_field = \"start_hr\",\n                   w = rep(1, nrow(origin_df.changi)), \n                   samples_loc = sample_points,\n                   samples_time = sample_time.origin, \n                   kernel_name = \"quartic\",\n                   bw_net = 300, bw_time = 1,\n                   adaptive = TRUE,\n                   trim_bw_net = 900,\n                   trim_bw_time = 80,\n                   method = \"discontinuous\",\n                   div = \"bw\", max_depth = 10,\n                   digits = 2, tol = 0.01,\n                   agg = 15, grid_shape = c(1,1), \n                   verbose  = FALSE)\n\nall_densities.destination &lt;- c(tnkde_densities.destination$k)\ncolor_breaks &lt;- classIntervals(all_densities.destination, n = 10, style = \"kmeans\")\n\nall_maps.destination &lt;- lapply(1:ncol(tnkde_densities.destination$k), function(i){\n  time &lt;- sample_time.destination[[i]]\n  sample_points$density &lt;- tnkde_densities.destination$k[,i]\n  map1 &lt;- tm_shape(sample_points) + \n  tm_dots(col = \"density\", size = 0.01,\n          breaks = color_breaks$brks, palette = viridis(10)) + \n    tm_layout(legend.show=FALSE, main.title = paste(\"TNKDE Destination Changi\", time, \":00\"), main.title.size = 0.5)\n  return(map1)\n})\n\ntmap_animation(all_maps.destination, filename = \"images/tnkde_destination_changi.gif\", \n               width = 1000, height = 1000, dpi = 300, delay = 50)\n\nall_densities.origin &lt;- c(tnkde_densities.origin$k)\ncolor_breaks.origin &lt;- classIntervals(all_densities.origin, n = 10, style = \"kmeans\")\n\nall_maps.origin&lt;- lapply(1:ncol(tnkde_densities.origin$k), function(i){\n  time &lt;- sample_time.origin[[i]]\n  \n  sample_points$density &lt;- tnkde_densities.origin$k[,i]\n  map1 &lt;- tm_shape(sample_points) + \n  tm_dots(col = \"density\", size = 0.01,\n          breaks = color_breaks.origin$brks, palette = viridis(10)) + \n    tm_layout(legend.show=FALSE, main.title = paste(\"TNKDE Origin Changi\", time, \":00\"), main.title.size = 0.5)\n  return(map1)\n})\n\ntmap_animation(all_maps.origin, filename = \"images/tnkde_origin_changi.gif\", \n               width = 1000, height = 1000, dpi = 300, delay = 50)\n\n\nOriginDestination\n\n\n\n\n\n\n\n\n\nFrom the TNKDE, we are able to make a few interesting observations. While it is expected that the hours between 12-6 were quiet (as people typically would not want land in the middle of the night), we can observe that the morning hours also had lesser trips from the airport. This could also indicate a preference not to land in the morning - which is something I didn’t expect. However, for the destination, we can observe that it is consistently busy throughout 24 hours.\n\n\n6.2 CBD\n\ndestination_df.cbd$end_hr &lt;- as.numeric(destination_df.cbd$end_hr) \norigin_df.cbd$start_hr &lt;- as.numeric(origin_df.cbd$start_hr)\n\n\nlixels &lt;- lixelize_lines(osm_cbd, 700, mindist = 350)\nsample_points &lt;- lines_center(lixels)\n\nsample_time.destination &lt;- seq(min(destination_df.cbd$end_hr), max(destination_df.cbd$end_hr), 1)\nsample_time.origin &lt;- seq(min(origin_df.cbd$start_hr), max(origin_df.cbd$start_hr), 1)\n\ntnkde_densities.destination &lt;- tnkde(lines = osm_cbd,\n                   events = destination_df.cbd,\n                   time_field = \"end_hr\",\n                   w = rep(1, nrow(destination_df.cbd)), \n                   samples_loc = sample_points,\n                   samples_time = sample_time.destination, \n                   kernel_name = \"quartic\",\n                   bw_net = 300, bw_time = 1,\n                   adaptive = TRUE,\n                   trim_bw_net = 900,\n                   trim_bw_time = 80,\n                   method = \"discontinuous\",\n                   div = \"bw\", max_depth = 10,\n                   digits = 2, tol = 0.01,\n                   agg = 15, grid_shape = c(1,1), \n                   verbose  = FALSE)\n\ntnkde_densities.origin &lt;- tnkde(lines = osm_cbd,\n                   events = origin_df.cbd,\n                   time_field = \"start_hr\",\n                   w = rep(1, nrow(origin_df.cbd)), \n                   samples_loc = sample_points,\n                   samples_time = sample_time.origin, \n                   kernel_name = \"quartic\",\n                   bw_net = 300, bw_time = 1,\n                   adaptive = TRUE,\n                   trim_bw_net = 900,\n                   trim_bw_time = 80,\n                   method = \"discontinuous\",\n                   div = \"bw\", max_depth = 10,\n                   digits = 2, tol = 0.01,\n                   agg = 15, grid_shape = c(1,1), \n                   verbose  = FALSE)\n\nall_densities.destination &lt;- c(tnkde_densities.destination$k)\ncolor_breaks &lt;- classIntervals(all_densities.destination, n = 10, style = \"kmeans\")\n\nall_maps.destination &lt;- lapply(1:ncol(tnkde_densities.destination$k), function(i){\n  time &lt;- sample_time.destination[[i]]\n  sample_points$density &lt;- tnkde_densities.destination$k[,i]\n  map1 &lt;- tm_shape(sample_points) + \n  tm_dots(col = \"density\", size = 0.01,\n          breaks = color_breaks$brks, palette = viridis(10)) + \n    tm_layout(legend.show=FALSE, main.title = paste(\"TNKDE Destination CBD\", time, \":00\"), main.title.size = 0.5)\n  return(map1)\n})\n\ntmap_animation(all_maps.destination, filename = \"images/tnkde_destination_cbd.gif\", \n               width = 1000, height = 1000, dpi = 300, delay = 50)\n\nall_densities.origin &lt;- c(tnkde_densities.origin$k)\ncolor_breaks.origin &lt;- classIntervals(all_densities.origin, n = 10, style = \"kmeans\")\n\nall_maps.origin&lt;- lapply(1:ncol(tnkde_densities.origin$k), function(i){\n  time &lt;- sample_time.origin[[i]]\n  \n  sample_points$density &lt;- tnkde_densities.origin$k[,i]\n  map1 &lt;- tm_shape(sample_points) + \n  tm_dots(col = \"density\", size = 0.01,\n          breaks = color_breaks.origin$brks, palette = viridis(10)) + \n    tm_layout(legend.show=FALSE, main.title = paste(\"TNKDE Origin CBD\", time, \":00\"), main.title.size = 0.5)\n  return(map1)\n})\n\ntmap_animation(all_maps.origin, filename = \"images/tnkde_origin_cbd.gif\", \n               width = 1000, height = 1000, dpi = 300, delay = 50)\n\n\nOriginDestination\n\n\n\n\n\n\n\n\n\nFrom the origin, we see what is expected - the density is highest during the afternoon, but there is an interesting upsurge in traffic around 1am. Similarly, for the destination, density is surprisingly high in the middle of the night (2-4am). This could possibly be due to nightlife activities or some public events/gatherings.\n\n\n6.3 Woodlands\n\ndestination_df.woodlands$end_hr &lt;- as.numeric(destination_df.woodlands$end_hr) \norigin_df.woodlands$start_hr &lt;- as.numeric(origin_df.woodlands$start_hr)\n\n\nlixels &lt;- lixelize_lines(osm_woodlands, 700, mindist = 350)\nsample_points &lt;- lines_center(lixels)\n\nsample_time.destination &lt;- seq(min(destination_df.woodlands$end_hr), max(destination_df.woodlands$end_hr), 1)\nsample_time.origin &lt;- seq(min(origin_df.woodlands$start_hr), max(origin_df.woodlands$start_hr), 1)\n\ntnkde_densities.destination &lt;- tnkde(lines = osm_woodlands,\n                   events = destination_df.woodlands,\n                   time_field = \"end_hr\",\n                   w = rep(1, nrow(destination_df.woodlands)), \n                   samples_loc = sample_points,\n                   samples_time = sample_time.destination, \n                   kernel_name = \"quartic\",\n                   bw_net = 300, bw_time = 1,\n                   adaptive = TRUE,\n                   trim_bw_net = 900,\n                   trim_bw_time = 80,\n                   method = \"discontinuous\",\n                   div = \"bw\", max_depth = 10,\n                   digits = 2, tol = 0.01,\n                   agg = 15, grid_shape = c(1,1), \n                   verbose  = FALSE)\n\ntnkde_densities.origin &lt;- tnkde(lines = osm_woodlands,\n                   events = origin_df.woodlands,\n                   time_field = \"start_hr\",\n                   w = rep(1, nrow(origin_df.woodlands)), \n                   samples_loc = sample_points,\n                   samples_time = sample_time.origin, \n                   kernel_name = \"quartic\",\n                   bw_net = 300, bw_time = 1,\n                   adaptive = TRUE,\n                   trim_bw_net = 900,\n                   trim_bw_time = 80,\n                   method = \"discontinuous\",\n                   div = \"bw\", max_depth = 10,\n                   digits = 2, tol = 0.01,\n                   agg = 15, grid_shape = c(1,1), \n                   verbose  = FALSE)\n\nall_densities.destination &lt;- c(tnkde_densities.destination$k)\ncolor_breaks &lt;- classIntervals(all_densities.destination, n = 10, style = \"kmeans\")\n\nall_maps.destination &lt;- lapply(1:ncol(tnkde_densities.destination$k), function(i){\n  time &lt;- sample_time.destination[[i]]\n  sample_points$density &lt;- tnkde_densities.destination$k[,i]\n  map1 &lt;- tm_shape(sample_points) + \n  tm_dots(col = \"density\", size = 0.01,\n          breaks = color_breaks$brks, palette = viridis(10)) + \n    tm_layout(legend.show=FALSE, main.title = paste(\"TNKDE Destination Woodlands\", time, \":00\"), main.title.size = 0.5)\n  return(map1)\n})\n\ntmap_animation(all_maps.destination, filename = \"images/tnkde_destination_woodlands.gif\", \n               width = 1000, height = 1000, dpi = 300, delay = 50)\n\nCreating frames\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n\nCreating animation\nAnimation saved to C:\\chesterchia\\IS415-GAA\\Take-home_Ex\\Take-home_Ex01\\images\\tnkde_destination_woodlands.gif \n\nall_densities.origin &lt;- c(tnkde_densities.origin$k)\ncolor_breaks.origin &lt;- classIntervals(all_densities.origin, n = 10, style = \"kmeans\")\n\nall_maps.origin&lt;- lapply(1:ncol(tnkde_densities.origin$k), function(i){\n  time &lt;- sample_time.origin[[i]]\n  \n  sample_points$density &lt;- tnkde_densities.origin$k[,i]\n  map1 &lt;- tm_shape(sample_points) + \n  tm_dots(col = \"density\", size = 0.01,\n          breaks = color_breaks.origin$brks, palette = viridis(10)) + \n    tm_layout(legend.show=FALSE, main.title = paste(\"TNKDE Origin Woodlands\", time, \":00\"), main.title.size = 0.5)\n  return(map1)\n})\n\ntmap_animation(all_maps.origin, filename = \"images/tnkde_origin_woodlands.gif\", \n               width = 1000, height = 1000, dpi = 300, delay = 50)\n\nCreating frames\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n\nCreating animation\nAnimation saved to C:\\chesterchia\\IS415-GAA\\Take-home_Ex\\Take-home_Ex01\\images\\tnkde_origin_woodlands.gif \n\n\n\nOriginDestination\n\n\n\n\n\n\n\n\n\nFor Woodlands, there seems to be nothing out of the ordinary. Origin trips are relatively consistent - low in the night, high early in the morning due to people leaving for work. Destination trips are pretty consistent as well, highest during peak hours.\n\n\n6.4 Jurong East\n\ndestination_df.je$end_hr &lt;- as.numeric(destination_df.je$end_hr) \norigin_df.je$start_hr &lt;- as.numeric(origin_df.je$start_hr)\n\n\nlixels &lt;- lixelize_lines(osm_je, 700, mindist = 350)\nsample_points &lt;- lines_center(lixels)\n\nsample_time.destination &lt;- seq(min(destination_df.je$end_hr), max(destination_df.je$end_hr), 1)\nsample_time.origin &lt;- seq(min(origin_df.je$start_hr), max(origin_df.je$start_hr), 1)\n\ntnkde_densities.destination &lt;- tnkde(lines = osm_je,\n                   events = destination_df.je,\n                   time_field = \"end_hr\",\n                   w = rep(1, nrow(destination_df.je)), \n                   samples_loc = sample_points,\n                   samples_time = sample_time.destination, \n                   kernel_name = \"quartic\",\n                   bw_net = 300, bw_time = 1,\n                   adaptive = TRUE,\n                   trim_bw_net = 900,\n                   trim_bw_time = 80,\n                   method = \"discontinuous\",\n                   div = \"bw\", max_depth = 10,\n                   digits = 2, tol = 0.01,\n                   agg = 15, grid_shape = c(1,1), \n                   verbose  = FALSE)\n\ntnkde_densities.origin &lt;- tnkde(lines = osm_je,\n                   events = origin_df.je,\n                   time_field = \"start_hr\",\n                   w = rep(1, nrow(origin_df.je)), \n                   samples_loc = sample_points,\n                   samples_time = sample_time.origin, \n                   kernel_name = \"quartic\",\n                   bw_net = 300, bw_time = 1,\n                   adaptive = TRUE,\n                   trim_bw_net = 900,\n                   trim_bw_time = 80,\n                   method = \"discontinuous\",\n                   div = \"bw\", max_depth = 10,\n                   digits = 2, tol = 0.01,\n                   agg = 15, grid_shape = c(1,1), \n                   verbose  = FALSE)\n\nall_densities.destination &lt;- c(tnkde_densities.destination$k)\ncolor_breaks &lt;- classIntervals(all_densities.destination, n = 10, style = \"kmeans\")\n\nall_maps.destination &lt;- lapply(1:ncol(tnkde_densities.destination$k), function(i){\n  time &lt;- sample_time.destination[[i]]\n  sample_points$density &lt;- tnkde_densities.destination$k[,i]\n  map1 &lt;- tm_shape(sample_points) + \n  tm_dots(col = \"density\", size = 0.01,\n          breaks = color_breaks$brks, palette = viridis(10)) + \n    tm_layout(legend.show=FALSE, main.title = paste(\"TNKDE Destination Jurong East\", time, \":00\"), main.title.size = 0.5)\n  return(map1)\n})\n\ntmap_animation(all_maps.destination, filename = \"images/tnkde_destination_je.gif\", \n               width = 1000, height = 1000, dpi = 300, delay = 50)\n\nCreating frames\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n\nCreating animation\nAnimation saved to C:\\chesterchia\\IS415-GAA\\Take-home_Ex\\Take-home_Ex01\\images\\tnkde_destination_je.gif \n\nall_densities.origin &lt;- c(tnkde_densities.origin$k)\ncolor_breaks.origin &lt;- classIntervals(all_densities.origin, n = 10, style = \"kmeans\")\n\nall_maps.origin&lt;- lapply(1:ncol(tnkde_densities.origin$k), function(i){\n  time &lt;- sample_time.origin[[i]]\n  \n  sample_points$density &lt;- tnkde_densities.origin$k[,i]\n  map1 &lt;- tm_shape(sample_points) + \n  tm_dots(col = \"density\", size = 0.01,\n          breaks = color_breaks.origin$brks, palette = viridis(10)) + \n    tm_layout(legend.show=FALSE, main.title = paste(\"TNKDE Origin Jurong East\", time, \":00\"), main.title.size = 0.5)\n  return(map1)\n})\n\ntmap_animation(all_maps.origin, filename = \"images/tnkde_origin_je.gif\", \n               width = 1000, height = 1000, dpi = 300, delay = 50)\n\nCreating frames\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n===\n\n\n====\n\n\n===\n\n\n\nCreating animation\nAnimation saved to C:\\chesterchia\\IS415-GAA\\Take-home_Ex\\Take-home_Ex01\\images\\tnkde_origin_je.gif \n\n\n\nOriginDestination\n\n\n\n\n\n\n\n\n\nInterestingly in Jurong East, most of the origin trips occur between after midnight and early morning. It is also much more spread out across the whole area, as compared to the destination trips which seem to cluster mainly in the northern area along the main roads. This pattern could indicate that perhaps those trips originating from Jurong East could be night shift workers, while those trips arriving at Jurong East are residents of the estate."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#conclusions",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#conclusions",
    "title": "Take-Home Exercise 1",
    "section": "7.0 Conclusions",
    "text": "7.0 Conclusions\nThe comprehensive analysis of grab patterns in Singapore, with a focus on the hotspots such as Changi, Downtown, Woodlands and Jurong East, has provided valuable insights into the spatio-temporal dynamics of transportation within the city. Leveraging data from Grab, Land Transport Authority (LTA) DataMall, and OpenStreetMap, we applied advanced geospatial analytics techniques to uncover meaningful patterns and trends.\nAdditionally, the integration of network-based kernel density estimation (NKDE) and temporal network kernel density estimation (TNKDE) allowed for a nuanced exploration of spatial and spatio-temporal density distributions. These methods proved effective in capturing localized patterns and temporal variations in taxi demand, providing a more granular understanding of mobility dynamics.\nAs urban landscapes continue to evolve, the application of geospatial analytics to human mobility data becomes increasingly critical. The findings from this project contribute to the broader discourse on smart city planning and underscore the potential of leveraging Information and Communication Technologies (ICT) data for more efficient and sustainable urban transportation systems."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#takeaways",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#takeaways",
    "title": "Take-Home Exercise 1",
    "section": "8.0 Takeaways",
    "text": "8.0 Takeaways\nThis initial take-home exercise proved to be an eye opener for me on multiple fronts. As someone unfamiliar with R programming, the syntax initially posed a challenge to comprehend. Surprisingly, the complexity of the assignment exceeded my expectations for a first task. However, instead of finding it mundane, I was pleasantly surprised by the engaging nature of the exercise. It turned out to be an enjoyable learning experience, prompting me to adapt and be resourceful in my problem-solving approach. Unlike my usual reliance on past exercises or slides, this module encouraged me to explore documentation and broaden my understanding. Completing this exercise has significantly bolstered my confidence in geospatial analytics. I eagerly look forward to the next take-home exercise, hoping for an even more enjoyable and intriguing challenge!"
  }
]